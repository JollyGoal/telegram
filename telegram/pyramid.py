import decimal

import telebot
import requests
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = '1024735974:AAFZZoTuOHDYEnOw6TCt-J-CKR9QAIDxaCQ'
bot = telebot.TeleBot(TOKEN)

withdraw_status = False
replenishment_status = False
input_card = False
input_card_replenishment = False
som = 0


def main_btns(message):
    chat_id = message.chat.id
    key = ReplyKeyboardMarkup(True, False)
    key.add('üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üí¥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    key.add('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã')
    key.add('‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    key.add('üë§ –ë–∞–ª–∞–Ω—Å')
    return key


def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    return text.split()[1] if len(text.split()) > 1 else None


def update_user_info(message):
    new_data = {
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'username': message.from_user.username,
    }
    response = requests.put('http://127.0.0.1:8000/api/profiles/?user_id=' + str(message.from_user.id), data=new_data)
    print(response.status_code, response.reason)


@bot.message_handler(commands=['start'])
def start(message):
    if not message.from_user.is_bot:
        referral_link = extract_unique_code(message.text)
        check_user = requests.get('http://127.0.0.1:8000/api/single_profile/?user_id=' + str(message.from_user.id))
        user_data = json.loads(check_user.text)
        if len(user_data['data']) == 0:
            # If there is no user:
            if referral_link:
                inviter = requests.get('http://127.0.0.1:8000/api/single_profile/?user_id=' + referral_link)
                data = json.loads(inviter.text)
                if len(data['data']) != 0:
                    new_data = {
                        'user_id': message.from_user.id,
                        'invited_by': referral_link,
                        'first_name': message.from_user.first_name,
                        'last_name': message.from_user.last_name,
                        'username': message.from_user.username,
                    }
                    response = requests.post('http://127.0.0.1:8000/api/profiles/', data=new_data)
                    print(response.status_code, response.reason)
                else:
                    new_data = {
                        'user_id': message.from_user.id,
                        'first_name': message.from_user.first_name,
                        'last_name': message.from_user.last_name,
                        'username': message.from_user.username,
                    }
                    response = requests.post('http://127.0.0.1:8000/api/profiles/', data=new_data)
                    print(response.status_code, response.reason)
            else:
                new_data = {
                    'user_id': message.from_user.id,
                    'first_name': message.from_user.first_name,
                    'last_name': message.from_user.last_name,
                    'username': message.from_user.username,
                }
                response = requests.post('http://127.0.0.1:8000/api/profiles/', data=new_data)
                print(response.status_code, response.reason)
        else:
            # If user exists:
            if user_data['data'][0]['invited_by']:
                # If existing user is already a referral:
                pass
            else:
                # If existing user is not a referral:
                if referral_link:
                    inviter = requests.get('http://127.0.0.1:8000/api/single_profile/?user_id=' + referral_link)
                    data = json.loads(inviter.text)
                    if len(data['data']) != 0:
                        new_data = {
                            'invited_by': referral_link,
                            'first_name': message.from_user.first_name,
                            'last_name': message.from_user.last_name,
                            'username': message.from_user.username,
                        }
                        response = requests.put('http://127.0.0.1:8000/api/profiles/?user_id=' + str(message.from_user.id), data=new_data)
                        print(response.status_code, response.reason)
                    else:
                        pass
        update_user_info(message)
        text = '–ü—Ä–∏–≤–µ—Ç, {}'.format(
            message.from_user.first_name) + '! –≠—Ç–æ –±–æ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ê–±–¥—É–º–∞–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–¥—É–º–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ'
        bot.send_message(message.from_user.id, text, reply_markup=main_btns(message))


@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.reply_to(message, "Help text. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç")  # TODO
    text = "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?"
    bot.send_message(message.from_user.id, text, reply_markup=main_btns(message))


@bot.message_handler(func=lambda message: '–ù–∞–∑–∞–¥' == message.text, content_types=['text'])
def send_oplatit(message):
    global withdraw_status
    global replenishment_status
    global input_card
    global input_card_replenishment
    global som
    replenishment_status = False
    withdraw_status = False
    input_card = False
    input_card_replenishment = False
    som = 0
    return bot.send_message(message.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_btns(message))


@bot.message_handler(content_types=["text"])
def send_any_text(message):
    global withdraw_status
    global replenishment_status
    global input_card
    global input_card_replenishment
    global som
    if not message.from_user.is_bot:
        chat_id = message.chat.id
        check_user = requests.get('http://127.0.0.1:8000/api/single_profile/?user_id=' + str(message.from_user.id))
        user_data = json.loads(check_user.text)
        key = ReplyKeyboardMarkup(True, False)
        if message.text == 'üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞':
            text = '–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: ' + str(user_data['data'][0]['balance']) + ' —Å—É–º' + '\n' + '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 30 000 —Å—É–º.\n'
            if float(user_data['data'][0]['balance']) > 30000:
                text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–≤–µ—Å—Ç–∏, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: '–í–´–í–ï–°–¢–ò –í–°–Å!' "
                withdraw_key = ReplyKeyboardMarkup(True, False)
                withdraw_key.add('–í–´–í–ï–°–¢–ò –í–°–Å!')
                withdraw_key.add('–ù–∞–∑–∞–¥')
                bot.reply_to(message, text, reply_markup=withdraw_key, parse_mode="HTML")
                withdraw_status = True
                pass
            else:
                text += "\n" + '–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 30 000 —Å—É–º –∏ –±–æ–ª—å—à–µ!'
                bot.reply_to(message, text, reply_markup=main_btns(message), parse_mode="HTML")

        if message.text == 'üí¥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
            bot.reply_to(message,
                         '–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á—ë—Ç: <b>"0000 0000 0000"</b> \n'
                         '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è 30 000 —Å—É–º. \n'
                         '–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª–∏ –¥–µ–Ω—å–≥–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è,\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: ', parse_mode='HTML')
            replenishment_key = ReplyKeyboardMarkup(True, False)
            replenishment_key.add('–ù–∞–∑–∞–¥')
            bot.send_message(message.from_user.id, "30000", reply_markup=replenishment_key)
            replenishment_status = True
            # bot.forward_message(to_chat_id, from_chat_id, message_id)  TODO
        elif message.text == 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞':
            bot.reply_to(message, '–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:')
            bot.send_message(message.from_user.id, '<b>http://t.me/GeniusPlaza_bot/?start=</b>{}'.format(message.from_user.id), parse_mode='HTML', reply_markup=key)
            bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —ç—Ç—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å <b>—Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏</b> —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.', parse_mode='HTML')
        elif message.text == 'üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã':
            invited_by_list = requests.get('http://127.0.0.1:8000/api/invited_by/?user_id=' + str(message.from_user.id))
            referrals_data = json.loads(invited_by_list.text)
            text = '–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>' + str(len(referrals_data['data'])) + '</b> \n–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: \n'
            for i in range(len(referrals_data['data'])):
                new_text = ''
                new_text += referrals_data['data'][i]['first_name']
                try:
                    new_text += ' ' + referrals_data['data'][i]['last_name']
                except:
                    pass
                new_text += ' \n'
                text += new_text
            bot.reply_to(message, text, parse_mode='HTML', reply_markup=key)
        elif message.text == '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            bot.reply_to(message, '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–∞–∫—Ü–∏—è—Ö', reply_markup=key)  # TODO
        elif message.text == 'üë§ –ë–∞–ª–∞–Ω—Å':
            bot.reply_to(message, '–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: ' + str(user_data['data'][0]['balance']) + ' —Å—É–º', reply_markup=key)
        else:
            if withdraw_status:
                withdraw_key = ReplyKeyboardMarkup(True, False)
                withdraw_key.add('–í–´–í–ï–°–¢–ò –í–°–Å!')
                withdraw_key.add('–ù–∞–∑–∞–¥')
                print("–ò–¥—ë—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!")
                try:
                    som = decimal.Decimal(message.text)
                    if som > 30000:
                        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"
                                                               "\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>8600 1111 2222 3333</b>", parse_mode="HTML")
                        input_card = True
                        withdraw_status = False
                    else:
                        bot.reply_to(message, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 30 000 —Å—É–º.\n" + '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ, –∏–ª–∏ –±–æ–ª—å—à–µ–µ <b>300000</>, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: "–í–´–í–ï–°–¢–ò –í–°–Å!" ', reply_markup=withdraw_key, parse_mode="HTML")
                except:
                    if message.text != "–í–´–í–ï–°–¢–ò –í–°–Å!":
                        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>300000</>, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: "–í–´–í–ï–°–¢–ò –í–°–Å!" ', reply_markup=withdraw_key, parse_mode="HTML")
                    else:
                        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"
                                                               "\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>8600 1111 2222 3333</b>", parse_mode="HTML")
                        som = user_data['data'][0]['balance']
                        input_card = True
                        withdraw_status = False
            elif input_card:
                text = "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! –î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —Å—É—Ç–æ–∫." + "\n" + "–î–µ—Ç–∞–ª–∏:" + "\n–°—É–º–º–∞: " + str(som) + "\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + message.text
                bot.send_message(message.from_user.id, text)
                withdraw_data = {
                    'broker': message.from_user.id,
                    'type': "V",
                    'sum': som,
                    'card': message.text,
                }
                response = requests.post('http://127.0.0.1:8000/api/transactions_not_verified/', data=withdraw_data)
                print(response.status_code, response.reason)
                withdraw_status = False
                replenishment_status = False
                input_card = False
                som = 0

            elif replenishment_status:
                replenishment_key = ReplyKeyboardMarkup(True, False)
                replenishment_key.add('–ù–∞–∑–∞–¥')
                try:
                    som = decimal.Decimal(message.text)
                    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞."
                                                           "\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>8600 1111 2222 3333</b>", parse_mode="HTML")
                    input_card_replenishment = True
                    replenishment_status = False
                except:
                    bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>300000</>', reply_markup=replenishment_key, parse_mode="HTML")
                    pass

            elif input_card_replenishment:

                text = "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! –î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —Å—É—Ç–æ–∫." + "\n" + "–î–µ—Ç–∞–ª–∏:" + "\n–°—É–º–º–∞: " + str(som) + "\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + message.text
                bot.send_message(message.from_user.id, text)
                replenishment_data = {
                    'broker': message.from_user.id,
                    'type': "P",
                    'sum': som,
                    'card': message.text,
                }
                response = requests.post('http://127.0.0.1:8000/api/transactions_not_verified/', data=replenishment_data)
                print(response.status_code, response.reason)
                withdraw_status = False
                replenishment_status = False
                input_card = False
                input_card_replenishment = False
                som = 0

            else:
                bot.reply_to(message, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á–µ–≥–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ üòî', reply_markup=main_btns(message))

        update_user_info(message)


if __name__ == '__main__':
    bot.polling(none_stop=True)
